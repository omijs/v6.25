{"version":3,"sources":["../static/js/26.cca69bdf.chunk.js","docs/en/ref.md"],"names":["webpackJsonp","50","module","exports"],"mappings":"AAAAA,cAAc,KAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAOC,QAAU","file":"static/js/26.cca69bdf.chunk.js","sourcesContent":["webpackJsonp([26],{\n\n/***/ 50:\n/***/ (function(module, exports) {\n\nmodule.exports = \"## Ref\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  onClick = (evt) => {\\n    console.log(this.h1)\\n  }\\n\\n  render(props) {\\n    return (\\n      <div>\\n        <h1 ref={e => { this.h1 = e }} onClick={this.onClick}>Hello, world!</h1>\\n      </div>\\n    )\\n  }\\n})\\n```\\n\\nAdd `ref = {e => {this. anyNameYouWant = e} ` to the element, and then you can access the element using `this. anyNameYouWant` in the JS code. You can improve the performance of update in two ways:\\n\\n* Assignment ahead of time\\n* createRef\\n\\n### Assignment ahead of time\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  onClick = (evt) => {\\n    console.log(this.h1)\\n  }\\n\\n  myRef = e => { this.h1 = e }\\n\\n  render(props) {\\n    return (\\n      <div>\\n        <h1 ref={this.myRef} onClick={this.onClick}>Hello, world!</h1>\\n      </div>\\n    )\\n  }\\n})\\n```\\n\\n### createRef\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  onClick = (evt) => {\\n    console.log(this.myRef.current)  //h1\\n  }\\n\\n  myRef = createRef()\\n\\n  render(props) {\\n    return (\\n      <div>\\n        <h1 ref={this.myRef} onClick={this.onClick}>Hello, world!</h1>\\n      </div>\\n    )\\n  }\\n})\\n```\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/26.cca69bdf.chunk.js","module.exports = \"## Ref\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  onClick = (evt) => {\\n    console.log(this.h1)\\n  }\\n\\n  render(props) {\\n    return (\\n      <div>\\n        <h1 ref={e => { this.h1 = e }} onClick={this.onClick}>Hello, world!</h1>\\n      </div>\\n    )\\n  }\\n})\\n```\\n\\nAdd `ref = {e => {this. anyNameYouWant = e} ` to the element, and then you can access the element using `this. anyNameYouWant` in the JS code. You can improve the performance of update in two ways:\\n\\n* Assignment ahead of time\\n* createRef\\n\\n### Assignment ahead of time\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  onClick = (evt) => {\\n    console.log(this.h1)\\n  }\\n\\n  myRef = e => { this.h1 = e }\\n\\n  render(props) {\\n    return (\\n      <div>\\n        <h1 ref={this.myRef} onClick={this.onClick}>Hello, world!</h1>\\n      </div>\\n    )\\n  }\\n})\\n```\\n\\n### createRef\\n\\n```jsx\\ndefine('my-element', class extends WeElement {\\n  onClick = (evt) => {\\n    console.log(this.myRef.current)  //h1\\n  }\\n\\n  myRef = createRef()\\n\\n  render(props) {\\n    return (\\n      <div>\\n        <h1 ref={this.myRef} onClick={this.onClick}>Hello, world!</h1>\\n      </div>\\n    )\\n  }\\n})\\n```\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/en/ref.md\n// module id = 50\n// module chunks = 26"],"sourceRoot":""}