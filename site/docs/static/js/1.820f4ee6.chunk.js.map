{
  "version": 3,
  "sources": [
    "../static/js/1.820f4ee6.chunk.js",
    "docs/zh-cn/store.md"
  ],
  "names": [
    "webpackJsonp",
    "75",
    "module",
    "exports"
  ],
  "mappings": "AAAAA,cAAc,IAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAOC,QAAU",
  "file": "static/js/1.820f4ee6.chunk.js",
  "sourcesContent": [
    "webpackJsonp([1],{\n\n/***/ 75:\n/***/ (function(module, exports) {\n\nmodule.exports = \"## Store 是什么？\\n\\nStore 是 Omi 内置的中心化数据仓库，他解决和提供了下面问题和能力：\\n\\n* 组件树数据共享\\n* 数据变更按需更新依赖的组件\\n\\n![](https://github.com/Tencent/omi/raw/master/assets/store.cn.jpg)\\n\\n\\n## 快速概览\\n\\n整个组件树共享数据，并且数据变更自动更新视图。\\n\\n```jsx\\nimport { define, render } from 'omi'\\n\\nclass Store {\\n  data = {\\n    count: 1\\n  }\\n  sub = () => {\\n    this.data.count--\\n  }\\n  add = () => {\\n    this.data.count++\\n  }\\n}\\n\\ndefine('my-counter', _ => (\\n  <div>\\n    <button onClick={_.store.sub}>-</button>\\n    <span>{_.store.data.count}</span>\\n    <button onClick={_.store.add}>+</button>\\n  </div>\\n), {\\n    use: ['count'], \\n    //或者使用 useSelf, useSelf 只会更新自身，不更新子组件\\n    //useSelf: ['count'], \\n    css: `span { color: red; }`,\\n    installed() {\\n      console.log('installed')\\n    }\\n  })\\n\\nrender(<my-counter />, 'body', new Store)\\n```\\n\\n* `<my-counter></my-counter>` 可以用于任意框架或者无框架，比如 `document.createElement('my-counter')`\\n\\n\\n你也可以使用 `useSelf`, `useSelf` 只会更新自身，不更新子组件。使用 `useSelf` 的时候在 JSX 里通过 `usingSelf` 访问对应属性。\\n\\n你也可以通过 `compute` 去实现 `computed` 计算属性，比如:\\n\\n```jsx\\ndefine('my-counter', _ => (\\n  <div>\\n    <button onClick={_.store.sub}>-</button>\\n    <span>{_.store.data.count}</span>\\n    <button onClick={_.store.add}>+</button>\\n    <div>Double: {_.computed.doubleCount}</div>\\n  </div>\\n), {\\n    use: ['count'],\\n    compute: {\\n      doubleCount() {\\n        return this.count * 2\\n      }\\n    }\\n  })\\n```\\n\\n路径也是支持的，比如下面的例子:\\n\\n```js\\nclass Store {\\n  data = {\\n    list: [\\n      { name: { first: 'dnt', last: 'zhang' } }\\n    ]\\n  }\\n}\\n\\n...\\n...\\n\\ndefine('my-counter', _ => (\\n  ...\\n  ...\\n), {\\n    use: [\\n      'list[0].name', //可以通过 this.using[0] 访问\\n    ],\\n    compute: {\\n      fullName() {\\n        return this.list[0].name.first + this.list[0].name.last\\n      }\\n    }\\n  })\\n```\\n\\n![](https://tencent.github.io/omi/assets/store.cn.jpg)\\n\\n### 多个 store 注入\\n\\n```jsx\\nimport { define, render } from 'omi'\\n\\ndefine('my-app', _ => {\\n  const store = _.store.storeA\\n  const { data, add, sub } = store\\n  return (\\n    <p>\\n      Clicked: {data.count} times\\n      <button onClick={add}>+</button>\\n      <button onClick={sub}>-</button>\\n\\n      <div>\\n        {_.store.storeB.data.msg}\\n        <button  onClick={_.store.storeB.changeMsg}>\\n          change storeB's msg\\n        </button>\\n      </div>\\n    </p>\\n  )\\n}, {\\n  useSelf: {\\n    storeA: ['count', 'adding'],\\n    storeB: ['msg']\\n  }\\n})\\n\\nconst storeA = new class Store {\\n  data = {\\n    count: 0,\\n    adding: false\\n  }\\n  sub = () => {\\n    this.data.count--\\n  }\\n  add = () => {\\n    this.data.count++\\n  }\\n}\\n\\nconst storeB = new class Store {\\n  data = {\\n    msg: 'abc'\\n  }\\n  changeMsg = () => {\\n    this.data.msg = 'bcd'\\n  }\\n}\\n\\nrender( <my-app /> , 'body', {\\n  storeA,\\n  storeB\\n})\\n```\\n\\n怎么在注入多 store 的时候使用 `compute` and `computed`? 非常简单：\\n\\n```jsx\\ndefine('my-app', _ => {\\n  const store = _.store.storeA\\n  const { data, add, sub } = store\\n  return (\\n    <p>\\n      Clicked: {data.count} times\\n      <button onClick={add}>+</button>\\n      <button onClick={sub}>-</button>\\n\\n      <div>\\n        {_.store.storeB.data.msg}\\n        <button onClick={_.store.storeB.changeMsg}>\\n          change storeB's msg\\n        </button>\\n      </div>\\n\\n      <div>{_.computed.dobuleCount}</div>\\n      <div>{_.computed.reverseMsg}</div>\\n    </p>\\n  )\\n}, {\\n    useSelf: {\\n      storeA: ['count', 'adding'],\\n      storeB: ['msg']\\n    },\\n    compute: {\\n      dobuleCount() {\\n        return this.storeA.data.count * 2\\n      },\\n      reverseMsg() {\\n        return this.storeB.data.msg.split('').reverse().join('')\\n      }\\n    }\\n  })\\n```\\n\\n### API 和 钩子\\n\\n```jsx\\ndefine('my-component', _ => (\\n  ...\\n  ...\\n), {\\n    use: ['path', 'path.a', 'path[1].b'],\\n    useSelf: ['path.c', 'path[1].d'],\\n    css: 'h1 { color: red; }',\\n    propTypes: { },\\n    defaultProps: { },\\n    isLightDOM: true, //default is false\\n\\n    //生命周期\\n    install() { }, \\n    installed() { }, \\n    uninstall() { }, \\n    receiveProps() { },\\n    beforeUpdate() { }, \\n    updated() { }, \\n    beforeRender() { }, \\n    rendered() { },\\n    \\n    //自定义方法\\n    myMethodA() { },\\n    myMethodB() { }\\n\\n  })\\n```\\n\\n### 通过 prop 注入 use 或 useSelf\\n\\n```jsx\\n<my-counter use={['count']} ></my-counter>\\n```\\n\\n## 一段代码完全上手 Store\\n\\n```jsx\\nimport { render, WeElement, define } from 'omi'\\n\\ndefine('my-counter', class extends WeElement {\\n  use = ['count', 'adding']\\n\\n  addIfOdd = () => {\\n    if (this.store.data.count % 2 !== 0) {\\n      this.store.add()\\n    }\\n  }\\n\\n  addAsync = () => {\\n    this.store.data.adding = true\\n    setTimeout(() => {\\n      this.store.data.adding = false\\n      this.store.add()\\n    }, 1000)\\n  }\\n\\n  render() {\\n    const store = this.store\\n    const { data, add, sub } = store\\n    return (\\n      <p>\\n        Clicked: {data.count} times\\n        {' '}\\n        <button onClick={add}>+</button>\\n        {' '}\\n        <button onClick={sub}>-</button>\\n        {' '}\\n        <button disabled={data.count % 2 === 0} onClick={this.addIfOdd}>\\n          Add if odd\\n        </button>\\n        {' '}\\n        <button disabled={data.adding} onClick={this.addAsync}>\\n          Add async\\n        </button>\\n      </p>\\n    )\\n  }\\n})\\n\\nrender(<my-counter />, 'body', new class Store {\\n  data = {\\n    count: 0,\\n    adding: false\\n  }\\n  sub = () => {\\n    this.data.count--\\n  }\\n  add = () => {\\n    this.data.count++\\n  }\\n})\\n```\\n\\n* 通过 `use` 声明依赖的 path，当然也可以使用 `useSelf`，`useSelf`触发的更新只会更新自己，不会更新子组件。\\n* `store` 通过 render 的第三个参数从根节点注入到所有组件。\\n\\n下面举一个复杂的 `use` 例子。\\n\\nStore 里的 data:\\n\\n```json\\n{\\n  count: 0,\\n  arr: ['china', 'tencent'],\\n  motto: 'I love omi.',\\n  userInfo: {\\n    firstName: 'dnt',\\n    lastName: 'zhang',\\n    age: 18\\n  }\\n}\\n```\\n\\nUse 和 Compute 语法如下:\\n\\n```jsx\\nuse = [\\n  'count', //直接字符串，可通过 this.using[0] 访问\\n  'arr[0]', //也支持 path，可通过 this.using[1] 访问\\n  'motto',\\n  'userInfo',\\n  { name: 'arr[1]' } //{ alias: path }，可通过 this.using.name 访问\\n]\\n\\ncompute = {\\n  reverseMotto() {\\n    return this.motto.split('').reverse().join('')\\n  },\\n  fullName() {\\n    return this.userInfo.firstName + this.userInfo.lastName\\n  }\\n}\\n```\\n\\n下面看看 JSX 中使用:\\n\\n```jsx\\n...\\n...\\nrender() {\\n  return (\\n    <div>\\n      <button onClick={this.sub}>-</button>\\n      <span>{this.using[0]}</span>\\n      <button onClick={this.add}>+</button>\\n      <div>\\n        <span>{this.using[1]}</span>\\n        <button onClick={this.rename}>rename</button>\\n      </div>\\n      <div>{this.computed.reverseMotto}</div><button onClick={this.changeMotto}>change motto</button>\\n      <div>{this.using.name}</div>\\n      <div>{this.using[3]}</div>\\n      <div>\\n        {this.computed.fullName}\\n        <button onClick={this.changeFirstName}>change first name</button>\\n      </div>\\n    </div>\\n  )\\n}\\n...\\n...\\n```\\n\\n如果不带有 alias ，你也可以直接通过 `this.store.data.xxx` 访问。\\n\\n\\n当 `store.data` 发生变化，依赖变更数据的组件会进行更新，举例说明 Path 命中规则:\\n\\n| Proxy Path(由数据更改产生) |  use 中的 path | 是否更新 |\\n| ---------- | ---------- | -------- |\\n| abc        | abc        | 更新     |\\n| abc[1]     | abc        | 更新     |\\n| abc.a      | abc        | 更新     |\\n| abc        | abc.a      | 不更新   |\\n| abc        | abc[1]     | 不更新   |\\n| abc        | abc[1].c   | 不更新   |\\n| abc.b      | abc.b      | 更新     |\\n\\n以上只要命中一个条件就可以进行更新！\\n\\n总结： 只要注入组件的 path 等于 use 里声明 或者在 use 里声明的其中 path 子节点下就会进行更新！\\n\\n### 解构赋值\\n\\n```jsx\\nimport { define, WeElement } from 'omi'\\nimport '../my-list'\\n\\ndefine('my-sidebar', class extends WeElement {\\n  static css = require('./_index.css')\\n\\n  use = [\\n    'menus',\\n    'sideBarShow',\\n    'lan'\\n  ]\\n\\n  render() {\\n    const [menus, sideBarShow, lan] = this.using\\n\\n    return (\\n      <div class={`list${sideBarShow ? ' show' : ''}`}>\\n        {menus[lan].map((menu, index) => (\\n          <my-list menu={menu} index={index} />\\n        ))}\\n      </div>\\n    )\\n  }\\n})\\n```\\n\\n这里举了个例子使用 ES2015+ 语法  `const [xx, xxx] = xxxx` 的语法快速赋值。\\n\\n## 动态 use\\n\\n如果你不希望同样的组件拥有同样的依赖，可以使用动态的 use：\\n\\n\\n```js\\nuse() {\\n  return [\\n    'a.b',\\n    'c[1].d',\\n    `e.f.${xxx}.d[${index}]`\\n  ]\\n}\\n```\\n\\n## 函数式风格 \\n\\n```jsx\\nimport { define, render } from 'omi'\\n\\nclass Store {\\n  data = {\\n    count: 1\\n  }\\n  sub = () => {\\n    this.data.count--\\n  }\\n  add = () => {\\n    this.data.count++\\n  }\\n}\\n\\ndefine('my-counter', ['count'], _ => (\\n  <div>\\n    <button onClick={_.store.sub}>-</button>\\n    <span>{_.store.data.count}</span>\\n    <button onClick={_.store.add}>+</button>\\n  </div>\\n))\\n\\nrender(<my-counter />, 'body', new Store)\\n```\\n\\n非常灵活！\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/1.820f4ee6.chunk.js",
    "module.exports = \"## Store 是什么？\\n\\nStore 是 Omi 内置的中心化数据仓库，他解决和提供了下面问题和能力：\\n\\n* 组件树数据共享\\n* 数据变更按需更新依赖的组件\\n\\n![](https://github.com/Tencent/omi/raw/master/assets/store.cn.jpg)\\n\\n\\n## 快速概览\\n\\n整个组件树共享数据，并且数据变更自动更新视图。\\n\\n```jsx\\nimport { define, render } from 'omi'\\n\\nclass Store {\\n  data = {\\n    count: 1\\n  }\\n  sub = () => {\\n    this.data.count--\\n  }\\n  add = () => {\\n    this.data.count++\\n  }\\n}\\n\\ndefine('my-counter', _ => (\\n  <div>\\n    <button onClick={_.store.sub}>-</button>\\n    <span>{_.store.data.count}</span>\\n    <button onClick={_.store.add}>+</button>\\n  </div>\\n), {\\n    use: ['count'], \\n    //或者使用 useSelf, useSelf 只会更新自身，不更新子组件\\n    //useSelf: ['count'], \\n    css: `span { color: red; }`,\\n    installed() {\\n      console.log('installed')\\n    }\\n  })\\n\\nrender(<my-counter />, 'body', new Store)\\n```\\n\\n* `<my-counter></my-counter>` 可以用于任意框架或者无框架，比如 `document.createElement('my-counter')`\\n\\n\\n你也可以使用 `useSelf`, `useSelf` 只会更新自身，不更新子组件。使用 `useSelf` 的时候在 JSX 里通过 `usingSelf` 访问对应属性。\\n\\n你也可以通过 `compute` 去实现 `computed` 计算属性，比如:\\n\\n```jsx\\ndefine('my-counter', _ => (\\n  <div>\\n    <button onClick={_.store.sub}>-</button>\\n    <span>{_.store.data.count}</span>\\n    <button onClick={_.store.add}>+</button>\\n    <div>Double: {_.computed.doubleCount}</div>\\n  </div>\\n), {\\n    use: ['count'],\\n    compute: {\\n      doubleCount() {\\n        return this.count * 2\\n      }\\n    }\\n  })\\n```\\n\\n路径也是支持的，比如下面的例子:\\n\\n```js\\nclass Store {\\n  data = {\\n    list: [\\n      { name: { first: 'dnt', last: 'zhang' } }\\n    ]\\n  }\\n}\\n\\n...\\n...\\n\\ndefine('my-counter', _ => (\\n  ...\\n  ...\\n), {\\n    use: [\\n      'list[0].name', //可以通过 this.using[0] 访问\\n    ],\\n    compute: {\\n      fullName() {\\n        return this.list[0].name.first + this.list[0].name.last\\n      }\\n    }\\n  })\\n```\\n\\n![](https://tencent.github.io/omi/assets/store.cn.jpg)\\n\\n### 多个 store 注入\\n\\n```jsx\\nimport { define, render } from 'omi'\\n\\ndefine('my-app', _ => {\\n  const store = _.store.storeA\\n  const { data, add, sub } = store\\n  return (\\n    <p>\\n      Clicked: {data.count} times\\n      <button onClick={add}>+</button>\\n      <button onClick={sub}>-</button>\\n\\n      <div>\\n        {_.store.storeB.data.msg}\\n        <button  onClick={_.store.storeB.changeMsg}>\\n          change storeB's msg\\n        </button>\\n      </div>\\n    </p>\\n  )\\n}, {\\n  useSelf: {\\n    storeA: ['count', 'adding'],\\n    storeB: ['msg']\\n  }\\n})\\n\\nconst storeA = new class Store {\\n  data = {\\n    count: 0,\\n    adding: false\\n  }\\n  sub = () => {\\n    this.data.count--\\n  }\\n  add = () => {\\n    this.data.count++\\n  }\\n}\\n\\nconst storeB = new class Store {\\n  data = {\\n    msg: 'abc'\\n  }\\n  changeMsg = () => {\\n    this.data.msg = 'bcd'\\n  }\\n}\\n\\nrender( <my-app /> , 'body', {\\n  storeA,\\n  storeB\\n})\\n```\\n\\n怎么在注入多 store 的时候使用 `compute` and `computed`? 非常简单：\\n\\n```jsx\\ndefine('my-app', _ => {\\n  const store = _.store.storeA\\n  const { data, add, sub } = store\\n  return (\\n    <p>\\n      Clicked: {data.count} times\\n      <button onClick={add}>+</button>\\n      <button onClick={sub}>-</button>\\n\\n      <div>\\n        {_.store.storeB.data.msg}\\n        <button onClick={_.store.storeB.changeMsg}>\\n          change storeB's msg\\n        </button>\\n      </div>\\n\\n      <div>{_.computed.dobuleCount}</div>\\n      <div>{_.computed.reverseMsg}</div>\\n    </p>\\n  )\\n}, {\\n    useSelf: {\\n      storeA: ['count', 'adding'],\\n      storeB: ['msg']\\n    },\\n    compute: {\\n      dobuleCount() {\\n        return this.storeA.data.count * 2\\n      },\\n      reverseMsg() {\\n        return this.storeB.data.msg.split('').reverse().join('')\\n      }\\n    }\\n  })\\n```\\n\\n### API 和 钩子\\n\\n```jsx\\ndefine('my-component', _ => (\\n  ...\\n  ...\\n), {\\n    use: ['path', 'path.a', 'path[1].b'],\\n    useSelf: ['path.c', 'path[1].d'],\\n    css: 'h1 { color: red; }',\\n    propTypes: { },\\n    defaultProps: { },\\n    isLightDOM: true, //default is false\\n\\n    //生命周期\\n    install() { }, \\n    installed() { }, \\n    uninstall() { }, \\n    receiveProps() { },\\n    beforeUpdate() { }, \\n    updated() { }, \\n    beforeRender() { }, \\n    rendered() { },\\n    \\n    //自定义方法\\n    myMethodA() { },\\n    myMethodB() { }\\n\\n  })\\n```\\n\\n### 通过 prop 注入 use 或 useSelf\\n\\n```jsx\\n<my-counter use={['count']} ></my-counter>\\n```\\n\\n## 一段代码完全上手 Store\\n\\n```jsx\\nimport { render, WeElement, define } from 'omi'\\n\\ndefine('my-counter', class extends WeElement {\\n  use = ['count', 'adding']\\n\\n  addIfOdd = () => {\\n    if (this.store.data.count % 2 !== 0) {\\n      this.store.add()\\n    }\\n  }\\n\\n  addAsync = () => {\\n    this.store.data.adding = true\\n    setTimeout(() => {\\n      this.store.data.adding = false\\n      this.store.add()\\n    }, 1000)\\n  }\\n\\n  render() {\\n    const store = this.store\\n    const { data, add, sub } = store\\n    return (\\n      <p>\\n        Clicked: {data.count} times\\n        {' '}\\n        <button onClick={add}>+</button>\\n        {' '}\\n        <button onClick={sub}>-</button>\\n        {' '}\\n        <button disabled={data.count % 2 === 0} onClick={this.addIfOdd}>\\n          Add if odd\\n        </button>\\n        {' '}\\n        <button disabled={data.adding} onClick={this.addAsync}>\\n          Add async\\n        </button>\\n      </p>\\n    )\\n  }\\n})\\n\\nrender(<my-counter />, 'body', new class Store {\\n  data = {\\n    count: 0,\\n    adding: false\\n  }\\n  sub = () => {\\n    this.data.count--\\n  }\\n  add = () => {\\n    this.data.count++\\n  }\\n})\\n```\\n\\n* 通过 `use` 声明依赖的 path，当然也可以使用 `useSelf`，`useSelf`触发的更新只会更新自己，不会更新子组件。\\n* `store` 通过 render 的第三个参数从根节点注入到所有组件。\\n\\n下面举一个复杂的 `use` 例子。\\n\\nStore 里的 data:\\n\\n```json\\n{\\n  count: 0,\\n  arr: ['china', 'tencent'],\\n  motto: 'I love omi.',\\n  userInfo: {\\n    firstName: 'dnt',\\n    lastName: 'zhang',\\n    age: 18\\n  }\\n}\\n```\\n\\nUse 和 Compute 语法如下:\\n\\n```jsx\\nuse = [\\n  'count', //直接字符串，可通过 this.using[0] 访问\\n  'arr[0]', //也支持 path，可通过 this.using[1] 访问\\n  'motto',\\n  'userInfo',\\n  { name: 'arr[1]' } //{ alias: path }，可通过 this.using.name 访问\\n]\\n\\ncompute = {\\n  reverseMotto() {\\n    return this.motto.split('').reverse().join('')\\n  },\\n  fullName() {\\n    return this.userInfo.firstName + this.userInfo.lastName\\n  }\\n}\\n```\\n\\n下面看看 JSX 中使用:\\n\\n```jsx\\n...\\n...\\nrender() {\\n  return (\\n    <div>\\n      <button onClick={this.sub}>-</button>\\n      <span>{this.using[0]}</span>\\n      <button onClick={this.add}>+</button>\\n      <div>\\n        <span>{this.using[1]}</span>\\n        <button onClick={this.rename}>rename</button>\\n      </div>\\n      <div>{this.computed.reverseMotto}</div><button onClick={this.changeMotto}>change motto</button>\\n      <div>{this.using.name}</div>\\n      <div>{this.using[3]}</div>\\n      <div>\\n        {this.computed.fullName}\\n        <button onClick={this.changeFirstName}>change first name</button>\\n      </div>\\n    </div>\\n  )\\n}\\n...\\n...\\n```\\n\\n如果不带有 alias ，你也可以直接通过 `this.store.data.xxx` 访问。\\n\\n\\n当 `store.data` 发生变化，依赖变更数据的组件会进行更新，举例说明 Path 命中规则:\\n\\n| Proxy Path(由数据更改产生) |  use 中的 path | 是否更新 |\\n| ---------- | ---------- | -------- |\\n| abc        | abc        | 更新     |\\n| abc[1]     | abc        | 更新     |\\n| abc.a      | abc        | 更新     |\\n| abc        | abc.a      | 不更新   |\\n| abc        | abc[1]     | 不更新   |\\n| abc        | abc[1].c   | 不更新   |\\n| abc.b      | abc.b      | 更新     |\\n\\n以上只要命中一个条件就可以进行更新！\\n\\n总结： 只要注入组件的 path 等于 use 里声明 或者在 use 里声明的其中 path 子节点下就会进行更新！\\n\\n### 解构赋值\\n\\n```jsx\\nimport { define, WeElement } from 'omi'\\nimport '../my-list'\\n\\ndefine('my-sidebar', class extends WeElement {\\n  static css = require('./_index.css')\\n\\n  use = [\\n    'menus',\\n    'sideBarShow',\\n    'lan'\\n  ]\\n\\n  render() {\\n    const [menus, sideBarShow, lan] = this.using\\n\\n    return (\\n      <div class={`list${sideBarShow ? ' show' : ''}`}>\\n        {menus[lan].map((menu, index) => (\\n          <my-list menu={menu} index={index} />\\n        ))}\\n      </div>\\n    )\\n  }\\n})\\n```\\n\\n这里举了个例子使用 ES2015+ 语法  `const [xx, xxx] = xxxx` 的语法快速赋值。\\n\\n## 动态 use\\n\\n如果你不希望同样的组件拥有同样的依赖，可以使用动态的 use：\\n\\n\\n```js\\nuse() {\\n  return [\\n    'a.b',\\n    'c[1].d',\\n    `e.f.${xxx}.d[${index}]`\\n  ]\\n}\\n```\\n\\n## 函数式风格 \\n\\n```jsx\\nimport { define, render } from 'omi'\\n\\nclass Store {\\n  data = {\\n    count: 1\\n  }\\n  sub = () => {\\n    this.data.count--\\n  }\\n  add = () => {\\n    this.data.count++\\n  }\\n}\\n\\ndefine('my-counter', ['count'], _ => (\\n  <div>\\n    <button onClick={_.store.sub}>-</button>\\n    <span>{_.store.data.count}</span>\\n    <button onClick={_.store.add}>+</button>\\n  </div>\\n))\\n\\nrender(<my-counter />, 'body', new Store)\\n```\\n\\n非常灵活！\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/zh-cn/store.md\n// module id = 75\n// module chunks = 1"
  ],
  "sourceRoot": ""
}
