{"version":3,"sources":["../static/js/6.bb995a3b.chunk.js","docs/zh-cn/provide-inject.md"],"names":["webpackJsonp","70","module","exports"],"mappings":"AAAAA,cAAc,IAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAOC,QAAU","file":"static/js/6.bb995a3b.chunk.js","sourcesContent":["webpackJsonp([6],{\n\n/***/ 70:\n/***/ (function(module, exports) {\n\nmodule.exports = \"\\n## Provide / Inject\\n\\n跨域多个层级向下传递 props 有时非常麻烦，这个时候可以使用 provide 和 Inject 跨组件层级传递。\\n\\n```jsx\\ndefine('parent-el', class extends WeElement {\\n\\n  provide = {\\n    name: 'omi'\\n  }\\n\\n  render() {\\n    return <child-el></child-el>\\n  }\\n})\\n\\n//不仅仅是子，在任意子孙曾孙节点都可以使用 inject 来消费祖先节点的注入\\ndefine('child-el', class extends WeElement {\\n\\n  inject = ['name']\\n\\n  render() {\\n    //output: <div>omi</div>\\n    return <div>{this.injection.name}</div>\\n  }\\n})\\n```\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/6.bb995a3b.chunk.js","module.exports = \"\\n## Provide / Inject\\n\\n跨域多个层级向下传递 props 有时非常麻烦，这个时候可以使用 provide 和 Inject 跨组件层级传递。\\n\\n```jsx\\ndefine('parent-el', class extends WeElement {\\n\\n  provide = {\\n    name: 'omi'\\n  }\\n\\n  render() {\\n    return <child-el></child-el>\\n  }\\n})\\n\\n//不仅仅是子，在任意子孙曾孙节点都可以使用 inject 来消费祖先节点的注入\\ndefine('child-el', class extends WeElement {\\n\\n  inject = ['name']\\n\\n  render() {\\n    //output: <div>omi</div>\\n    return <div>{this.injection.name}</div>\\n  }\\n})\\n```\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/zh-cn/provide-inject.md\n// module id = 70\n// module chunks = 6"],"sourceRoot":""}