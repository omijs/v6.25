{"version":3,"sources":["../static/js/15.2f8ac6ea.chunk.js","docs/zh-cn/introduction.md"],"names":["webpackJsonp","61","module","exports"],"mappings":"AAAAA,cAAc,KAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAOC,QAAU","file":"static/js/15.2f8ac6ea.chunk.js","sourcesContent":["webpackJsonp([15],{\n\n/***/ 61:\n/***/ (function(module, exports) {\n\nmodule.exports = \"<!-- <p align=\\\"center\\\"><img src=\\\"https://github.com/Tencent/omi/raw/master/assets/omi-logo2019.svg?sanitize=true\\\" alt=\\\"omi\\\" width=\\\"300\\\"/></p>\\n<h2 align=\\\"center\\\">Omi - 下一代前端框架，去万物糟粕，合精华为一点点 JS</h2>\\n<p align=\\\"center\\\"><b>基于 Web Components 并支持 IE8+(omio) 和 小程序(omip)</b></p>\\n -->\\n\\n## Omi 是什么？\\n\\nOmi (读音 /ˈomɪ/，类似于 欧米) 是跨框架框架，基于 Web Components 设计，可以使用 JSX/TSX 来写 HTML 结构。\\n\\n\\n<em> Omi looks really neat!<br> </em>\\n　　　　— [Jason Miller (Creator of Preact)](https://twitter.com/_developit/)\\n\\n<em> I really like the trend towards \\\"frameworks\\\" that:<br><br>\\\"export default class WeElement extends HTMLElement {..}\\\"<br> <br>This one, Omi, is from Tencent.</em>       \\n　　　　— [Dion Almaer](https://twitter.com/dalmaer/)\\n\\n## 快速上手\\n\\n```jsx {4-7}\\nimport { render, WeElement, define, h } from 'omi'\\n\\ndefine('my-counter', class extends WeElement {\\n  static css = `\\n    span{\\n        color: red;\\n    }`\\n\\n  count = 1\\n\\n  sub = () => {\\n    this.count--\\n    this.update()\\n  }\\n\\n  add = () => {\\n    this.count++\\n    this.update()\\n  }\\n\\n  render() {\\n    return (\\n      // <></> 和 <h.f></h.f> 是相等的\\n      <>\\n        <button onClick={this.sub}>-</button>\\n        <span>{this.count}</span>\\n        <button onClick={this.add}>+</button>\\n      </>\\n    )\\n  }\\n})\\n\\nrender(<my-counter />, 'body')\\n```\\n\\n通过上面脚本的执行，你已经定义好了一个自定义标签，可以不使用 render 方法，直接使用 `my-counter` 标签：\\n\\n```jsx\\n<body>\\n  <my-counter></my-counter>\\n</body>\\n```\\n\\n看上面高亮的部分，可以给组件加样式，比如上面的 span 的作用域仅仅在组件内部，不会污染别的组件。到现在你已经成功入门 Omi 了！你学会了:\\n\\n* 为组件添加**结构**，如上面使用 JSX 书写结构\\n* 为组件添加**行为**，如上面的 `onClick` 绑定事件\\n* 为组件添加**样式**，如上面的 `static css`\\n* 渲染组件到 body，当然也可以把组件渲染到任意其他组件\\n\\n## 使用 TypeScript 定义一个 button 元素\\n\\n```ts\\nimport { tag, WeElement, h, extractClass } from 'omi'\\nimport * as css from './index.scss'\\n\\ninterface Props {\\n  size?: 'medium' | 'small' | 'mini',\\n  type?: 'primary' | 'success' | 'warning' | 'danger' | 'info' | 'text'\\n  plain?: boolean,\\n  round?: boolean,\\n  circle?: boolean,\\n  loading?: boolean,\\n  disabled?: boolean,\\n  icon?: string,\\n  autofocus?: boolean,\\n  nativeType?: 'button' | 'submit' | 'reset',\\n  block?: boolean\\n  text?: string\\n}\\n\\n@tag('o-button')\\nexport default class Button extends WeElement<Props>{\\n  static css = css\\n\\n  static defaultProps = {\\n    plain: false,\\n    round: false,\\n    circle: false,\\n    loading: false,\\n    disabled: false,\\n    autofocus: false,\\n    nativeType: 'button',\\n    block: false\\n  }\\n\\n  static propTypes = {\\n    size: String,\\n    type: String,\\n    plain: Boolean,\\n    round: Boolean,\\n    circle: Boolean,\\n    loading: Boolean,\\n    disabled: Boolean,\\n    icon: String,\\n    autofocus: Boolean,\\n    nativeType: String,\\n    block: Boolean,\\n    text: String\\n  }\\n\\n  render(props) {\\n    return <button disabled={props.disabled} {...extractClass(props, 'o-button', {\\n      ['o-button-' + props.type]: props.type,\\n      ['o-button-' + props.size]: props.size,\\n      'is-plain': props.plain,\\n      'is-round': props.round,\\n      'is-circle': props.circle,\\n      'is-disabled': props.disabled,\\n      'is-block': props.block\\n    })} type={props.nativeType} >\\n      {props.loading && <i class='icon-loading'></i>}\\n      {props.text}\\n      <slot></slot>\\n    </button>\\n  }\\n}\\n```\\n\\n入门了，恭喜你！\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/15.2f8ac6ea.chunk.js","module.exports = \"<!-- <p align=\\\"center\\\"><img src=\\\"https://github.com/Tencent/omi/raw/master/assets/omi-logo2019.svg?sanitize=true\\\" alt=\\\"omi\\\" width=\\\"300\\\"/></p>\\n<h2 align=\\\"center\\\">Omi - 下一代前端框架，去万物糟粕，合精华为一点点 JS</h2>\\n<p align=\\\"center\\\"><b>基于 Web Components 并支持 IE8+(omio) 和 小程序(omip)</b></p>\\n -->\\n\\n## Omi 是什么？\\n\\nOmi (读音 /ˈomɪ/，类似于 欧米) 是跨框架框架，基于 Web Components 设计，可以使用 JSX/TSX 来写 HTML 结构。\\n\\n\\n<em> Omi looks really neat!<br> </em>\\n　　　　— [Jason Miller (Creator of Preact)](https://twitter.com/_developit/)\\n\\n<em> I really like the trend towards \\\"frameworks\\\" that:<br><br>\\\"export default class WeElement extends HTMLElement {..}\\\"<br> <br>This one, Omi, is from Tencent.</em>       \\n　　　　— [Dion Almaer](https://twitter.com/dalmaer/)\\n\\n## 快速上手\\n\\n```jsx {4-7}\\nimport { render, WeElement, define, h } from 'omi'\\n\\ndefine('my-counter', class extends WeElement {\\n  static css = `\\n    span{\\n        color: red;\\n    }`\\n\\n  count = 1\\n\\n  sub = () => {\\n    this.count--\\n    this.update()\\n  }\\n\\n  add = () => {\\n    this.count++\\n    this.update()\\n  }\\n\\n  render() {\\n    return (\\n      // <></> 和 <h.f></h.f> 是相等的\\n      <>\\n        <button onClick={this.sub}>-</button>\\n        <span>{this.count}</span>\\n        <button onClick={this.add}>+</button>\\n      </>\\n    )\\n  }\\n})\\n\\nrender(<my-counter />, 'body')\\n```\\n\\n通过上面脚本的执行，你已经定义好了一个自定义标签，可以不使用 render 方法，直接使用 `my-counter` 标签：\\n\\n```jsx\\n<body>\\n  <my-counter></my-counter>\\n</body>\\n```\\n\\n看上面高亮的部分，可以给组件加样式，比如上面的 span 的作用域仅仅在组件内部，不会污染别的组件。到现在你已经成功入门 Omi 了！你学会了:\\n\\n* 为组件添加**结构**，如上面使用 JSX 书写结构\\n* 为组件添加**行为**，如上面的 `onClick` 绑定事件\\n* 为组件添加**样式**，如上面的 `static css`\\n* 渲染组件到 body，当然也可以把组件渲染到任意其他组件\\n\\n## 使用 TypeScript 定义一个 button 元素\\n\\n```ts\\nimport { tag, WeElement, h, extractClass } from 'omi'\\nimport * as css from './index.scss'\\n\\ninterface Props {\\n  size?: 'medium' | 'small' | 'mini',\\n  type?: 'primary' | 'success' | 'warning' | 'danger' | 'info' | 'text'\\n  plain?: boolean,\\n  round?: boolean,\\n  circle?: boolean,\\n  loading?: boolean,\\n  disabled?: boolean,\\n  icon?: string,\\n  autofocus?: boolean,\\n  nativeType?: 'button' | 'submit' | 'reset',\\n  block?: boolean\\n  text?: string\\n}\\n\\n@tag('o-button')\\nexport default class Button extends WeElement<Props>{\\n  static css = css\\n\\n  static defaultProps = {\\n    plain: false,\\n    round: false,\\n    circle: false,\\n    loading: false,\\n    disabled: false,\\n    autofocus: false,\\n    nativeType: 'button',\\n    block: false\\n  }\\n\\n  static propTypes = {\\n    size: String,\\n    type: String,\\n    plain: Boolean,\\n    round: Boolean,\\n    circle: Boolean,\\n    loading: Boolean,\\n    disabled: Boolean,\\n    icon: String,\\n    autofocus: Boolean,\\n    nativeType: String,\\n    block: Boolean,\\n    text: String\\n  }\\n\\n  render(props) {\\n    return <button disabled={props.disabled} {...extractClass(props, 'o-button', {\\n      ['o-button-' + props.type]: props.type,\\n      ['o-button-' + props.size]: props.size,\\n      'is-plain': props.plain,\\n      'is-round': props.round,\\n      'is-circle': props.circle,\\n      'is-disabled': props.disabled,\\n      'is-block': props.block\\n    })} type={props.nativeType} >\\n      {props.loading && <i class='icon-loading'></i>}\\n      {props.text}\\n      <slot></slot>\\n    </button>\\n  }\\n}\\n```\\n\\n入门了，恭喜你！\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/zh-cn/introduction.md\n// module id = 61\n// module chunks = 15"],"sourceRoot":""}