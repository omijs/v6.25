{"version":3,"sources":["../static/js/20.b4d9f9a5.chunk.js","docs/zh-cn/class.md"],"names":["webpackJsonp","56","module","exports"],"mappings":"AAAAA,cAAc,KAERC,GACA,SAAUC,EAAQC,GCHxBD,EAAOC,QAAU","file":"static/js/20.b4d9f9a5.chunk.js","sourcesContent":["webpackJsonp([20],{\n\n/***/ 56:\n/***/ (function(module, exports) {\n\nmodule.exports = \"## Class\\n\\nOmi 有内置的两个 class 方法 `classNames` 和 `extractClass`：\\n\\n```jsx\\nimport { classNames, extractClass } from 'omi'\\n\\ndefine('my-element', class extends WeElement {\\n  render(props) {\\n    //extractClass 会取出 props 的  class 或 className 属性并与其他 classNames 合并在一起\\n    const cls = extractClass(props, 'o-my-class', {\\n      'other-class': true,\\n      'other-class-b': this.xxx === 1\\n    })\\n\\n    return (\\n      <div {...cls} {...props}>\\n        Test\\n      </div>\\n    )\\n  }\\n})\\n```\\n\\n上面的 `classNames` 和 npm 上的 [classNames](https://www.npmjs.com/package/classnames) 是一样的。\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/20.b4d9f9a5.chunk.js","module.exports = \"## Class\\n\\nOmi 有内置的两个 class 方法 `classNames` 和 `extractClass`：\\n\\n```jsx\\nimport { classNames, extractClass } from 'omi'\\n\\ndefine('my-element', class extends WeElement {\\n  render(props) {\\n    //extractClass 会取出 props 的  class 或 className 属性并与其他 classNames 合并在一起\\n    const cls = extractClass(props, 'o-my-class', {\\n      'other-class': true,\\n      'other-class-b': this.xxx === 1\\n    })\\n\\n    return (\\n      <div {...cls} {...props}>\\n        Test\\n      </div>\\n    )\\n  }\\n})\\n```\\n\\n上面的 `classNames` 和 npm 上的 [classNames](https://www.npmjs.com/package/classnames) 是一样的。\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/docs/zh-cn/class.md\n// module id = 56\n// module chunks = 20"],"sourceRoot":""}